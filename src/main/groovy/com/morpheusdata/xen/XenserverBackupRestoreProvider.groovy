package com.morpheusdata.xen

import com.morpheusdata.core.MorpheusContext
import com.morpheusdata.core.Plugin
import com.morpheusdata.core.backup.BackupRestoreProvider
import com.morpheusdata.core.backup.response.BackupRestoreResponse
import com.morpheusdata.core.backup.util.BackupStatusUtility
import com.morpheusdata.core.util.HttpApiClient
import com.morpheusdata.model.Cloud
import com.morpheusdata.model.ComputeServer
import com.morpheusdata.model.Workload
import com.morpheusdata.response.ServiceResponse;
import com.morpheusdata.model.BackupRestore;
import com.morpheusdata.model.BackupResult;
import com.morpheusdata.model.Backup;
import com.morpheusdata.model.Instance
import com.morpheusdata.xen.util.XenComputeUtility
import groovy.util.logging.Slf4j

@Slf4j
class XenserverBackupRestoreProvider implements BackupRestoreProvider {

//	Plugin plugin
	XenserverPlugin plugin
	MorpheusContext morpheusContext

	XenserverBackupRestoreProvider(XenserverPlugin plugin, MorpheusContext morpheusContext) {
		this.plugin = plugin
		this.morpheusContext = morpheusContext
	}
	
	/**
	 * Returns the Morpheus Context for interacting with data stored in the Main Morpheus Application
	 * @return an implementation of the MorpheusContext for running Future based rxJava queries
	 */
	MorpheusContext getMorpheus() {
		return morpheusContext
	}

	/**
	 * Add additional configurations to a backup restore. Morpheus will handle all basic configuration details, this is a
	 * convenient way to add additional configuration details specific to this backup restore provider.
	 * @param backupResultModel backup result to be restored
	 * @param config the configuration supplied by external inputs
	 * @param opts optional parameters used for configuration.
	 * @return a {@link ServiceResponse} object. A ServiceResponse with a false success will indicate a failed
	 * configuration and will halt the backup restore process.
	 */
	@Override
	ServiceResponse configureRestoreBackup(BackupResult backupResult, Map config, Map opts) {
		return ServiceResponse.success()
	}

	/**
	 * Build the configuration for the restored instance.
	 * @param backupResultModel backup result to be restored
	 * @param instanceModel the instance the backup was created from, if it still exists. Retained backups will not have a reference to the instance.
	 * @param restoreConfig the restore configuration generated by morpheus.
	 * @param opts optional parameters used for configuration.
	 * @return a {@link ServiceResponse} object. A ServiceResponse with a false success will indicate a failed
	 * configuration and will halt the backup restore process.
	 */
	@Override
	ServiceResponse getBackupRestoreInstanceConfig(BackupResult backupResult, Instance instanceModel, Map restoreConfig, Map opts) {
		return ServiceResponse.success()
	}

	/**
	 * Verify the backup restore is valid. Generally used to check if the backup and instance are both in a state
	 * compatible for executing the restore process.
	 * @param backupResultModel backup result to be restored
	 * @param opts optional parameters used for configuration.
	 * @return a {@link ServiceResponse} object. A ServiceResponse with a false success will indicate a failed
	 * configuration and will halt the backup restore process.
	 */
	@Override
	ServiceResponse validateRestoreBackup(BackupResult backupResult, Map opts) {
		return ServiceResponse.success()
	}

	/**
	 * Get restore options to configure the restore wizard. Although the {@link com.morpheusdata.core.backup.BackupProvider } and
	 * {@link com.morpheusdata.core.backup.BackupTypeProvider} supply configuration, there may be situations where the instance
	 * configuration will determine which options need to be presented in the restore wizard.
	 * <p>
	 * Available Restore options:
	 * 		<ul>
	 * 		 	<li>
	 * 		 	    restoreExistingEnabled (Boolean) -- determines the visibility of the restore to existing option
	 * 		 	</li>
	 * 		 	<li>
	 * 		 	  	restoreNewEnabled (Boolean) -- determines the visibility of the restore to new option
	 * 		 	</li>
	 * 		 	<li>
	 * 		 	  	name (String) -- default name of the restored instance
	 * 		 	</li>
	 * 		 	<li>
	 * 		 		hostname (String) -- default hostname of the restored instance
	 * 		 	</li>
	 * 		</ul>
	 *
	 * @param backupModel the backup
	 * @param opts optional parameters
	 * @return a {@link ServiceResponse} object. A ServiceResponse with a false success will indicate a failed
	 * configuration and will halt the backup restore process.
	 */
	@Override
	ServiceResponse getRestoreOptions(Backup backup, Map opts) {
		return ServiceResponse.success()
	}

	/**
	 * Execute the backup restore on the external system
	 * @param backupRestoreModel restore to be executed
	 * @param backupResultModel refernce to the backup result
	 * @param backupModel reference to the backup associated with the backup result
	 * @param opts optional parameters
	 * @return a {@link ServiceResponse} object. A ServiceResponse with a false success will indicate a failed
	 * configuration and will halt the backup restore process.
	 */
	@Override
	ServiceResponse restoreBackup(BackupRestore backupRestore, BackupResult backupResult, Backup backup, Map opts) {
//		return ServiceResponse.success()
		log.info("restoreBackup {}", backupResult)
//		def rtn = [success:true]
		ServiceResponse rtn = ServiceResponse.prepare(new BackupRestoreResponse(backupRestore))
		try{
			def config = backupResult.getConfigMap()
			log.info("RAZI :: config: ${config}")
			def snapshotId = backupResult.externalId ?: config.snapshotId
			log.info("RAZI :: snapshotId: ${snapshotId}")
//			def vmId = backupResult.externalId
//			log.info("RAZI :: vmId: ${vmId}")
			if(snapshotId) {
				def sourceWorkload = plugin.morpheus.async.workload.get(opts?.containerId ?: backupResult.containerId).blockingGet()
				log.info("RAZI :: sourceWorkload: ${sourceWorkload}")
				ComputeServer computeServer = sourceWorkload.server
				log.info("RAZI :: computeServer: ${computeServer}")
				Cloud cloud = computeServer.cloud
				log.info("RAZI :: cloud: ${cloud}")
				Map authConfig = plugin.getAuthConfig(cloud)
				log.info("RAZI :: authConfig: ${authConfig}")
				//execute restore
//				def restoreResults = XenComputeUtility.restoreServer(restoreOpts, snapshotId)
				def restoreResults = XenComputeUtility.restoreServer(authConfig, snapshotId)
//				log.info("restore results: {}", restoreResults)
				log.info("RAZI :: restore results: {}", restoreResults)
//				def taskId = restoreResults?.data?.task_uuid
//				log.info("RAZI :: taskId: ${taskId}")
				log.info("RAZI :: computeServer.externalId: ${computeServer.externalId}")
				if(restoreResults.success){
					rtn.data.backupRestore.status = BackupResult.Status.SUCCEEDED
//					rtn.data.backupRestore.externalId = computeServer.externalId
//					rtn.data.backupRestore.externalStatusRef = taskId
					rtn.data.updates = true
					rtn.success = true

					//restore stops the vm, so need to restart it
                    //Dustin will check and let us know
					def startVm = XenComputeUtility.startVm(authConfig, snapshotId)
//					log.info("RAZI :: startVm: ${startVm}")
				} else {
					rtn.data.backupRestore.status = BackupResult.Status.FAILED
					rtn.data.updates = true
				}
                log.info("RAZI :: rtn.data.backupRestore.status: ${rtn.data.backupRestore.status}")
			}
		} catch(e) {
			log.error("restoreBackup: ${e}", e)
			rtn.msg = e.getMessage()
			rtn.success = false
		}
		log.info("RAZI :: final RTN: ${rtn}")
		return rtn
	}

	/**
	 * Periodically check for any updates to an in-progress restore. This method will be executed every 60 seconds for
	 * the restore while the restore has a status of `START_REQUESTED` or `IN_PROGRESS`. Any other status will indicate
	 * the restore has completed and does not need to be refreshed. The primary use case for this method is long-running
	 * restores to avoid consuming resources during the restore process.
	 * @param backupRestore the running restore
	 * @param backupResult backup result referencing the backup to be restored
	 * @return a {@link ServiceResponse} object. A ServiceResponse with a false success will indicate a failed
	 * configuration and will halt the backup restore process.
	 */
	@Override
	ServiceResponse refreshBackupRestoreResult(BackupRestore backupRestore, BackupResult backupResult) {
		return ServiceResponse.success()
	}
}
